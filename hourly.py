#!/usr/bin/env python
import snowflake.connector
import fuckit
import keyring
#PASSWORD = keyring.get_password("Snowflake" , "PYTHON_SERVICE")


# this creates a log file for the script
import logging
logging.basicConfig(
    filename='C:/mystuff/tmp/snowflake_python_connector.log',
    level=logging.INFO)

# set account information
ACCOUNT = 'lillypulitzer'
USER = 'PYTHON_SERVICE'
PASSWORD = keyring.get_password("Snowflake" , "PYTHON_SERVICE")
WAREHOUSE = 'STITCH_TEST'
DATABASE = 'production'
SCHEMA = 'public'

# connect to Snowflake using default authenticator

cnx = snowflake.connector.connect(
user=USER,
password=PASSWORD,
account=ACCOUNT,
warehouse=WAREHOUSE,
database=DATABASE,
schema=SCHEMA,
)

# truncate the table
with fuckit:
    cnx.cursor().execute("merge into tbfactsales as a using vwfactsales as b on a.primary_key=b.primary_key when matched then update set date_created_key=b.date_created_key, date_shipped_key=b.date_shipped_key, date_created_hour_key=b.date_created_hour_key, DATE_SHIPPED_HOUR_KEY=b.DATE_SHIPPED_HOUR_KEY, date_created=b.date_created, date_shipped=b.date_shipped, channel=b.channel, organization=b.organization, store=b.store, order_number=b.order_number, line_number=b.line_number, line_type=b.line_type, line_status=b.line_status, presale_flag=b.presale_flag, non_merchandise_flag=b.non_merchandise_flag, gwp_flag=b.gwp_flag, send_sale_Flag=b.send_sale_Flag, employee_sale_flag=b.employee_sale_flag, markdown_flag=b.markdown_flag, return_reason=b.return_reason,entry_type=b.entry_type, product_key=b.product_key,UPC=b.UPC,QUANTITY=b.QUANTITY,MONETARY_VALUE=b.MONETARY_VALUE,MARKDOWN_AMOUNT=b.MARKDOWN_AMOUNT,DISCOUNT_AMOUNT=b.DISCOUNT_AMOUNT,COUPON_AMOUNT=b.COUPON_AMOUNT,LINE_TAX=b.LINE_TAX,LINE_CHARGE=b.LINE_CHARGE,ORIGINAL_PRICE=b.ORIGINAL_PRICE,ORIGINAL_STORE=b.ORIGINAL_STORE,ORIGINAL_ORDER_NUMBER=b.ORIGINAL_ORDER_NUMBER,ORIGINAL_ORDER_DATE=b.ORIGINAL_ORDER_DATE,CUSTOMER_ID=b.CUSTOMER_ID when not matched then insert (PRIMARY_KEY,DATE_CREATED_KEY,DATE_SHIPPED_KEY,DATE_CREATED_HOUR_KEY,DATE_SHIPPED_HOUR_KEY,DATE_CREATED,DATE_SHIPPED,CHANNEL,ORGANIZATION,STORE,ORDER_NUMBER,LINE_NUMBER,LINE_TYPE,LINE_STATUS,PRESALE_FLAG,NON_MERCHANDISE_FLAG,GWP_FLAG,SEND_SALE_FLAG,EMPLOYEE_SALE_FLAG,MARKDOWN_FLAG,RETURN_REASON,ENTRY_TYPE,PRODUCT_KEY,UPC,QUANTITY,MONETARY_VALUE,MARKDOWN_AMOUNT,DISCOUNT_AMOUNT,COUPON_AMOUNT,LINE_TAX,LINE_CHARGE,ORIGINAL_PRICE,ORIGINAL_STORE,ORIGINAL_ORDER_NUMBER,ORIGINAL_ORDER_DATE,CUSTOMER_ID) values (b.PRIMARY_KEY,b.DATE_CREATED_KEY,b.DATE_SHIPPED_KEY,b.DATE_CREATED_HOUR_KEY,b.DATE_SHIPPED_HOUR_KEY,b.DATE_CREATED,b.DATE_SHIPPED,b.CHANNEL,b.ORGANIZATION,b.STORE,b.ORDER_NUMBER,b.LINE_NUMBER,b.LINE_TYPE,b.LINE_STATUS,b.PRESALE_FLAG,b.NON_MERCHANDISE_FLAG,b.GWP_FLAG,b.SEND_SALE_FLAG,b.EMPLOYEE_SALE_FLAG,b.MARKDOWN_FLAG,b.RETURN_REASON,b.ENTRY_TYPE,b.PRODUCT_KEY,b.UPC,b.QUANTITY,b.MONETARY_VALUE,b.MARKDOWN_AMOUNT,b.DISCOUNT_AMOUNT,b.COUPON_AMOUNT,b.LINE_TAX,b.LINE_CHARGE,b.ORIGINAL_PRICE,b.ORIGINAL_STORE,b.ORIGINAL_ORDER_NUMBER,b.ORIGINAL_ORDER_DATE,b.CUSTOMER_ID)")
with fuckit:
    cnx.cursor().execute(" delete from tbfactsales where primary_key in (select t.primary_key from tbfactsales t left outer join vwfactsales v on t.primary_key = v.primary_key where v.primary_key is null) ")
with fuckit:
    cnx.cursor().execute("merge into tbFACTSALES_AGGREGATE as a using VWFACTSALES_AGGREGATE as b on a.primary_key=b.primary_key when matched then update set DATE_SHIPPED_KEY=b.DATE_SHIPPED_KEY,STORE=b.STORE,NET_SALES_VALUE=b.NET_SALES_VALUE,SALES_VALUE=b.SALES_VALUE,RETURNS_VALUE=b.RETURNS_VALUE,NET_SALES_QUANTITY=b.NET_SALES_QUANTITY,SALES_QUANTITY=b.SALES_QUANTITY,RETURNS_QUANTITY=b.RETURNS_QUANTITY,TRANSACTION_COUNT=b.TRANSACTION_COUNT,MARKDOWN_AMOUNT=b.MARKDOWN_AMOUNT,DISCOUNT_AMOUNT=b.DISCOUNT_AMOUNT when not matched then insert (PRIMARY_KEY,DATE_SHIPPED_KEY,STORE,NET_SALES_VALUE,SALES_VALUE,RETURNS_VALUE,NET_SALES_QUANTITY,SALES_QUANTITY,RETURNS_QUANTITY,TRANSACTION_COUNT,MARKDOWN_AMOUNT,DISCOUNT_AMOUNT) values (b.PRIMARY_KEY,b.DATE_SHIPPED_KEY,b.STORE,b.NET_SALES_VALUE,b.SALES_VALUE,b.RETURNS_VALUE,b.NET_SALES_QUANTITY,b.SALES_QUANTITY,b.RETURNS_QUANTITY,b.TRANSACTION_COUNT,b.MARKDOWN_AMOUNT,b.DISCOUNT_AMOUNT) ")
#cnx.cursor().execute("delete from tbFACTSALES_AGGREGATE where primary_key not in (select primary_key from VWFACTSALES_AGGREGATE) ")
with fuckit:
    cnx.cursor().execute("merge into tbFACTSALES_AGGREGATE_WITH_LY as a using VWFACTSALES_AGGREGATE_WITH_LY as b on a.primary_key=b.primary_key when matched then update set DATE_SHIPPED_KEY=b.DATE_SHIPPED_KEY,STORE=b.STORE,NET_SALES_VALUE=b.NET_SALES_VALUE,SALES_VALUE=b.SALES_VALUE,RETURNS_VALUE=b.RETURNS_VALUE,NET_SALES_QUANTITY=b.NET_SALES_QUANTITY,SALES_QUANTITY=b.SALES_QUANTITY,RETURNS_QUANTITY=b.RETURNS_QUANTITY,TRANSACTION_COUNT=b.TRANSACTION_COUNT,MARKDOWN_AMOUNT=b.MARKDOWN_AMOUNT,DISCOUNT_AMOUNT=b.DISCOUNT_AMOUNT,LY_DATE_SHIPPED_KEY=b.LY_DATE_SHIPPED_KEY,LY_NET_SALES_VALUE=b.LY_NET_SALES_VALUE,LY_SALES_VALUE=b.LY_SALES_VALUE,LY_RETURNS_VALUE=b.LY_RETURNS_VALUE,LY_NET_SALES_QUANTITY=b.LY_NET_SALES_QUANTITY,LY_SALES_QUANTITY=b.LY_SALES_QUANTITY,LY_RETURNS_QUANTITY=b.LY_RETURNS_QUANTITY,LY_TRANSACTION_COUNT=b.LY_TRANSACTION_COUNT,LY_MARKDOWN_AMOUNT=b.LY_MARKDOWN_AMOUNT,LY_DISCOUNT_AMOUNT=b.LY_DISCOUNT_AMOUNT,ONEK_TRANSACTIONS=b.ONEK_TRANSACTIONS,LY_ONEK_TRANSACTIONS=b.LY_ONEK_TRANSACTIONS when not matched then insert (PRIMARY_KEY,DATE_SHIPPED_KEY,STORE,NET_SALES_VALUE,SALES_VALUE,RETURNS_VALUE,NET_SALES_QUANTITY,SALES_QUANTITY,RETURNS_QUANTITY,TRANSACTION_COUNT,MARKDOWN_AMOUNT,DISCOUNT_AMOUNT,LY_DATE_SHIPPED_KEY,LY_NET_SALES_VALUE,LY_SALES_VALUE,LY_RETURNS_VALUE,LY_NET_SALES_QUANTITY,LY_SALES_QUANTITY,LY_RETURNS_QUANTITY,LY_TRANSACTION_COUNT,LY_MARKDOWN_AMOUNT,LY_DISCOUNT_AMOUNT,ONEK_TRANSACTIONS,LY_ONEK_TRANSACTIONS) values (b.PRIMARY_KEY,b.DATE_SHIPPED_KEY,b.STORE,b.NET_SALES_VALUE,b.SALES_VALUE,b.RETURNS_VALUE,b.NET_SALES_QUANTITY,b.SALES_QUANTITY,b.RETURNS_QUANTITY,b.TRANSACTION_COUNT,b.MARKDOWN_AMOUNT,b.DISCOUNT_AMOUNT,b.LY_DATE_SHIPPED_KEY,b.LY_NET_SALES_VALUE,b.LY_SALES_VALUE,b.LY_RETURNS_VALUE,b.LY_NET_SALES_QUANTITY,b.LY_SALES_QUANTITY,b.LY_RETURNS_QUANTITY,b.LY_TRANSACTION_COUNT,b.LY_MARKDOWN_AMOUNT,b.LY_DISCOUNT_AMOUNT,b.ONEK_TRANSACTIONS,b.LY_ONEK_TRANSACTIONS) ")
#cnx.cursor().execute("delete from tbFACTSALES_AGGREGATE_WITH_LY where primary_key not in (select primary_key from VWFACTSALES_AGGREGATE_WITH_LY) ")
with fuckit:
    cnx.cursor().execute("merge into tbfactsales_aggregate_product as a using vwfactsales_aggregate_product as b on a.primary_key=b.primary_key when matched then update set DATE_SHIPPED_KEY=b.DATE_SHIPPED_KEY,STORE=b.STORE,PRODUCT_KEY=b.PRODUCT_KEY,NET_SALES_VALUE=b.NET_SALES_VALUE,SALES_VALUE=b.SALES_VALUE,RETURNS_VALUE=b.RETURNS_VALUE,NET_SALES_QUANTITY=b.NET_SALES_QUANTITY,SALES_QUANTITY=b.SALES_QUANTITY,RETURNS_QUANTITY=b.RETURNS_QUANTITY,TRANSACTION_COUNT=b.TRANSACTION_COUNT,MARKDOWN_AMOUNT=b.MARKDOWN_AMOUNT,DISCOUNT_AMOUNT=b.DISCOUNT_AMOUNT when not matched then insert (PRIMARY_KEY,DATE_SHIPPED_KEY,STORE,PRODUCT_KEY,        NET_SALES_VALUE,        SALES_VALUE,RETURNS_VALUE,NET_SALES_QUANTITY,        SALES_QUANTITY,RETURNS_QUANTITY,TRANSACTION_COUNT,        MARKDOWN_AMOUNT,DISCOUNT_AMOUNT) values         (b.PRIMARY_KEY,b.DATE_SHIPPED_KEY,b.STORE, b.PRODUCT_KEY,        b.NET_SALES_VALUE,b.SALES_VALUE,b.RETURNS_VALUE,         b.NET_SALES_QUANTITY,b.SALES_QUANTITY,b.RETURNS_QUANTITY,         b.TRANSACTION_COUNT,b.MARKDOWN_AMOUNT,b.DISCOUNT_AMOUNT)")
with fuckit:
    cnx.cursor().execute(" delete from tbfactsales_aggregate_product where primary_key in (select t.primary_key from tbfactsales_aggregate_product t left outer join vwfactsales_aggregate_product v on t.primary_key = v.primary_key where v.primary_key is null) ")
with fuckit:
    cnx.cursor().execute("merge into tbTRAFFIC_FOR_SALES_EXPLORE as a using VWTRAFFIC_FOR_SALES_EXPLORE as b on a.primary_key=b.primary_key when matched then update set DATE_KEY=b.DATE_KEY,STORE_NO=b.STORE_NO,TRAFFIC_COUNT=b.TRAFFIC_COUNT,LY_primary_key=b.LY_primary_key,LY_date_key=b.LY_date_key,LY_store_no=b.LY_store_no, LY_TRAFFIC_COUNT=b.LY_TRAFFIC_COUNT when not matched then insert (PRIMARY_KEY,DATE_KEY,STORE_NO,TRAFFIC_COUNT,LY_primary_key,LY_date_key,LY_store_no,LY_TRAFFIC_COUNT)  values (b.PRIMARY_KEY,b.DATE_KEY,b.STORE_NO, b.TRAFFIC_COUNT,b.LY_primary_key,b.LY_date_key,b.LY_store_no,b.LY_TRAFFIC_COUNT)")
#cnx.cursor().execute("delete from tbTRAFFIC_FOR_SALES_EXPLORE where primary_key not in (select primary_key from VWTRAFFIC_FOR_SALES_EXPLORE) ")
with fuckit:
    cnx.cursor().execute("merge into tbTRAFFIC as a using VWTRAFFIC as b on a.primary_key=b.primary_key when matched then update set DATE_KEY=b.DATE_KEY,HOUR_KEY=b.HOUR_KEY,STORE_NO=b.STORE_NO,TRAFFIC_DATE=b.TRAFFIC_DATE,TRAFFIC_COUNT=b.TRAFFIC_COUNT,IS_ACTIVE_HOURS=b.IS_ACTIVE_HOURS,DATEMODIFIED=b.DATEMODIFIED when not matched then insert (PRIMARY_KEY,DATE_KEY,HOUR_KEY,STORE_NO,TRAFFIC_DATE,TRAFFIC_COUNT,IS_ACTIVE_HOURS,DATEMODIFIED) values (b.PRIMARY_KEY,b.DATE_KEY,b.HOUR_KEY,b.STORE_NO,b.TRAFFIC_DATE,b.TRAFFIC_COUNT,b.IS_ACTIVE_HOURS,b.DATEMODIFIED) ")
#cnx.cursor().execute("delete from tbTRAFFIC where primary_key not in (select primary_key from VWTRAFFIC) ")
with fuckit:
    cnx.cursor().execute("merge into tbPRESALES as a using VWPRESALES as b on a.primary_key=b.primary_key when matched then update set DATE_CREATED_KEY=b.DATE_CREATED_KEY,DATE_SHIPPED_KEY=b.DATE_SHIPPED_KEY,STORE_KEY=b.STORE_KEY,ORDER_NUMBER=b.ORDER_NUMBER,LINE_NUMBER=b.LINE_NUMBER,PRODUCT_KEY=b.PRODUCT_KEY,STATUS=b.STATUS,STATUS_NAME=b.STATUS_NAME,NET_SALES_VALUE=b.NET_SALES_VALUE,QUANTITY=b.QUANTITY when not matched then insert (PRIMARY_KEY,DATE_CREATED_KEY,DATE_SHIPPED_KEY,STORE_KEY,ORDER_NUMBER,LINE_NUMBER,PRODUCT_KEY,STATUS,STATUS_NAME,NET_SALES_VALUE,QUANTITY) values (b.PRIMARY_KEY,b.DATE_CREATED_KEY,b.DATE_SHIPPED_KEY,b.STORE_KEY,b.ORDER_NUMBER,b.LINE_NUMBER,b.PRODUCT_KEY,b.STATUS,b.STATUS_NAME,b.NET_SALES_VALUE,b.QUANTITY) ")
with fuckit:
    cnx.cursor().execute("delete from tbPRESALES where primary_key in (select t.primary_key from tbPRESALES t left outer join vwPRESALES v on t.primary_key = v.primary_key where v.primary_key is null) ")

with fuckit:
    cnx.cursor().execute("merge into TBFACTSALES_HEADER as a using VWFACTSALES_HEADER as b on a.primary_key=b.primary_key when matched then update set STORE=b.STORE,ORDER_NUMBER=b.ORDER_NUMBER,TOTAL_MONETARY_VALUE=b.TOTAL_MONETARY_VALUE,TOTAL_QUANTITY=b.TOTAL_QUANTITY,TOTAL_MARKDOWN_AMOUNT=b.TOTAL_MARKDOWN_AMOUNT,TOTAL_DISCOUNT_AMOUNT=b.TOTAL_DISCOUNT_AMOUNT,TOTAL_TAX=b.TOTAL_TAX,TOTAL_CHARGE=b.TOTAL_CHARGE when not matched then insert (PRIMARY_KEY,STORE,ORDER_NUMBER, TOTAL_MONETARY_VALUE,TOTAL_QUANTITY,TOTAL_MARKDOWN_AMOUNT, TOTAL_DISCOUNT_AMOUNT, TOTAL_TAX,TOTAL_CHARGE) values (b.PRIMARY_KEY,b.STORE, b.ORDER_NUMBER, b.TOTAL_MONETARY_VALUE,b.TOTAL_QUANTITY,b.TOTAL_MARKDOWN_AMOUNT, b.TOTAL_DISCOUNT_AMOUNT, b.TOTAL_TAX,TOTAL_CHARGE) ")
with fuckit:
    cnx.cursor().execute("delete from TBFACTSALES_HEADER where primary_key in (select t.primary_key from TBFACTSALES_HEADER t left outer join VWFACTSALES_HEADER v on t.primary_key = v.primary_key where v.primary_key is null) ")
    #cnx.cursor().execute("merge into TBFACTSALES_PRODUCT_SEASON as a using VWFACTSALES_PRODUCT_SEASON as b on a.primary_key=b.primary_key when matched then update set date_created_key=b.date_created_key, date_shipped_key=b.date_shipped_key, date_created_hour_key=b.date_created_hour_key, DATE_SHIPPED_HOUR_KEY=b.DATE_SHIPPED_HOUR_KEY, date_created=b.date_created, date_shipped=b.date_shipped, channel=b.channel, organization=b.organization, store=b.store, order_number=b.order_number, line_number=b.line_number, line_type=b.line_type, line_status=b.line_status, presale_flag=b.presale_flag, non_merchandise_flag=b.non_merchandise_flag, gwp_flag=b.gwp_flag, send_sale_Flag=b.send_sale_Flag, employee_sale_flag=b.employee_sale_flag, markdown_flag=b.markdown_flag, return_reason=b.return_reason,entry_type=b.entry_type, product_key=b.product_key,UPC=b.UPC,QUANTITY=b.QUANTITY,MONETARY_VALUE=b.MONETARY_VALUE,MARKDOWN_AMOUNT=b.MARKDOWN_AMOUNT,DISCOUNT_AMOUNT=b.DISCOUNT_AMOUNT,COUPON_AMOUNT=b.COUPON_AMOUNT,LINE_TAX=b.LINE_TAX,LINE_CHARGE=b.LINE_CHARGE,ORIGINAL_PRICE=b.ORIGINAL_PRICE,ORIGINAL_STORE=b.ORIGINAL_STORE,ORIGINAL_ORDER_NUMBER=b.ORIGINAL_ORDER_NUMBER,ORIGINAL_ORDER_DATE=b.ORIGINAL_ORDER_DATE,CUSTOMER_ID=b.CUSTOMER_ID when not matched then insert (PRIMARY_KEY,DATE_CREATED_KEY,DATE_SHIPPED_KEY,DATE_CREATED_HOUR_KEY,DATE_SHIPPED_HOUR_KEY,DATE_CREATED,DATE_SHIPPED,CHANNEL,ORGANIZATION,STORE,ORDER_NUMBER,LINE_NUMBER,LINE_TYPE,LINE_STATUS,PRESALE_FLAG,NON_MERCHANDISE_FLAG,GWP_FLAG,SEND_SALE_FLAG,EMPLOYEE_SALE_FLAG,MARKDOWN_FLAG,RETURN_REASON,ENTRY_TYPE,PRODUCT_KEY,UPC,QUANTITY,MONETARY_VALUE,MARKDOWN_AMOUNT,DISCOUNT_AMOUNT,COUPON_AMOUNT,LINE_TAX,LINE_CHARGE,ORIGINAL_PRICE,ORIGINAL_STORE,ORIGINAL_ORDER_NUMBER,ORIGINAL_ORDER_DATE,CUSTOMER_ID) values (b.PRIMARY_KEY,b.DATE_CREATED_KEY,b.DATE_SHIPPED_KEY,b.DATE_CREATED_HOUR_KEY,b.DATE_SHIPPED_HOUR_KEY,b.DATE_CREATED,b.DATE_SHIPPED,b.CHANNEL,b.ORGANIZATION,b.STORE,b.ORDER_NUMBER,b.LINE_NUMBER,b.LINE_TYPE,b.LINE_STATUS,b.PRESALE_FLAG,b.NON_MERCHANDISE_FLAG,b.GWP_FLAG,b.SEND_SALE_FLAG,b.EMPLOYEE_SALE_FLAG,b.MARKDOWN_FLAG,b.RETURN_REASON,b.ENTRY_TYPE,b.PRODUCT_KEY,b.UPC,b.QUANTITY,b.MONETARY_VALUE,b.MARKDOWN_AMOUNT,b.DISCOUNT_AMOUNT,b.COUPON_AMOUNT,b.LINE_TAX,b.LINE_CHARGE,b.ORIGINAL_PRICE,b.ORIGINAL_STORE,b.ORIGINAL_ORDER_NUMBER,b.ORIGINAL_ORDER_DATE,b.CUSTOMER_ID)")
    #cnx.cursor().execute("delete from TBFACTSALES_PRODUCT_SEASON where primary_key not in (select primary_key from VWFACTSALES_PRODUCT_SEASON) ")
